package com.mikazil.samsung_project;

import android.Manifest;
import android.annotation.SuppressLint;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.location.Location;
import android.os.Build;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.util.Log;
import android.view.View;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import androidx.activity.EdgeToEdge;
import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.SwitchCompat;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;

import com.google.android.gms.location.FusedLocationProviderClient;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.color.DynamicColors;
import com.mikazil.samsung_project.databinding.ActivityMainBinding;

import org.json.JSONException;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;
import java.util.Date;

public class MainActivity extends AppCompatActivity {
    private ActivityMainBinding binding;
    private static final int LOCATION_PERMISSION_REQUEST_CODE = 1001;
    private FusedLocationProviderClient fusedLocationClient;
    private boolean useGeolocation = false;
    private SharedPreferences preferences;
    private static final String PREFS_CITY = "last_city";
    private static final String PREFS_USE_GEOLOCATION = "use_geolocation";
    private static final int FOREGROUND_LOCATION_PERMISSION_REQUEST_CODE = 1002;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        EdgeToEdge.enable(this);
        binding = ActivityMainBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());
        SwitchCompat notificationSwitch = findViewById(R.id.notification_switch);
        fusedLocationClient = LocationServices.getFusedLocationProviderClient(this);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SharedPreferences
        preferences = PreferenceManager.getDefaultSharedPreferences(this);

        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ SharedPreferences
        useGeolocation = preferences.getBoolean(PREFS_USE_GEOLOCATION, false);
        String savedCity = preferences.getString(PREFS_CITY, "Moscow");

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –∏–Ω—Ç–µ–Ω—Ç–∞
        Intent intent = getIntent();
        if (intent != null && intent.hasExtra("use_geolocation")) {
            useGeolocation = intent.getBooleanExtra("use_geolocation", false);
            String city = intent.getStringExtra("city");

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∏–Ω—Ç–µ–Ω—Ç–∞
            savePreferences(city != null ? city : savedCity, useGeolocation);

            if (city != null && !city.isEmpty() && !useGeolocation) {
                fetchWeatherData(city);
            } else if (useGeolocation) {
                requestLocationPermission();
            } else {
                fetchWeatherData(savedCity);
            }
        } else {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if (useGeolocation) {
                requestLocationPermission();
            } else {
                fetchWeatherData(savedCity);
            }
        }

        setupSearchView();
        setupBackButton();
        DynamicColors.applyToActivityIfAvailable(this);
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ SharedPreferences
    private void savePreferences(String city, boolean useGeo) {
        SharedPreferences.Editor editor = preferences.edit();
        editor.putString(PREFS_CITY, city);
        editor.putBoolean(PREFS_USE_GEOLOCATION, useGeo);
        editor.apply();
    }

    private void setupSearchView() {
        binding.searchView.setOnQueryTextListener(new androidx.appcompat.widget.SearchView.OnQueryTextListener() {
            @Override
            public boolean onQueryTextSubmit(String query) {
                // –ü—Ä–∏ –ø–æ–∏—Å–∫–µ –æ—Ç–∫–ª—é—á–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
                useGeolocation = false;
                fetchWeatherData(query);
                savePreferences(query, false); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥
                binding.searchView.clearFocus();
                return true;
            }
            @Override
            public boolean onQueryTextChange(String newText) {
                return false;
            }
        });
    }

    private void updateRecommendation(double temperature, String weatherCondition) {
        TextView recommendationText = findViewById(R.id.recommendationText);
        StringBuilder recommendation = new StringBuilder();

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ
        if (temperature < -10) {
            recommendation.append("‚ùÑÔ∏è –û—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ! –ù–∞–¥–µ–Ω—å—Ç–µ —Ç–µ–ø–ª—É—é –∑–∏–º–Ω—é—é –æ–¥–µ–∂–¥—É, —à–∞–ø–∫—É, —à–∞—Ä—Ñ –∏ –≤–∞—Ä–µ–∂–∫–∏.");
        } else if (temperature < 0) {
            recommendation.append("‚õÑ –•–æ–ª–æ–¥–Ω–æ. –ù–∞–¥–µ–Ω—å—Ç–µ —Ç–µ–ø–ª—É—é –∫—É—Ä—Ç–∫—É, —à–∞–ø–∫—É –∏ —à–∞—Ä—Ñ.");
        } else if (temperature < 10) {
            recommendation.append("üß• –ü—Ä–æ—Ö–ª–∞–¥–Ω–æ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞–¥–µ—Ç—å –≤–µ—Ç—Ä–æ–≤–∫—É –∏–ª–∏ —Å–≤–∏—Ç–µ—Ä.");
        } else if (temperature < 20) {
            recommendation.append("üëï –¢–µ–ø–ª–æ! –ú–æ–∂–Ω–æ –Ω–∞–¥–µ—Ç—å –ª–µ–≥–∫—É—é –∫—É—Ä—Ç–∫—É –∏–ª–∏ —Å–≤–∏—Ç–µ—Ä.");
        } else if (temperature < 30) {
            recommendation.append("ü©≥ –ñ–∞—Ä–∫–æ! –ù–∞–¥–µ–Ω—å—Ç–µ —Ñ—É—Ç–±–æ–ª–∫—É –∏ —à–æ—Ä—Ç—ã.");
        } else {
            recommendation.append("ü•µ –û—á–µ–Ω—å –∂–∞—Ä–∫–æ! –ù–∞–¥–µ–Ω—å—Ç–µ –ª–µ–≥–∫—É—é –æ–¥–µ–∂–¥—É –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞.");
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        recommendation.append("\n\n");

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ—Å–∞–¥–∫–∞–º
        if (weatherCondition.contains("–¥–æ–∂–¥—å") || weatherCondition.contains("–ª–∏–≤–µ–Ω—å")) {
            recommendation.append("‚òî –í–æ–∑—å–º–∏—Ç–µ –∑–æ–Ω—Ç, –æ–∂–∏–¥–∞–µ—Ç—Å—è –¥–æ–∂–¥—å.");
        } else if (weatherCondition.contains("—Å–Ω–µ–≥")) {
            recommendation.append("‚õÑ –û–∂–∏–¥–∞–µ—Ç—Å—è —Å–Ω–µ–≥, –æ–¥–µ–Ω—å—Ç–µ—Å—å —Ç–µ–ø–ª–µ–µ.");
        } else if (weatherCondition.contains("–≥—Ä–æ–∑–∞")) {
            recommendation.append("‚ö° –ë—É–¥–µ—Ç –≥—Ä–æ–∑–∞, –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã.");
        } else if (weatherCondition.contains("—Å–æ–ª–Ω—Ü–µ") || weatherCondition.contains("—è—Å–Ω–æ")) {
            recommendation.append("üòé –°–æ–ª–Ω–µ—á–Ω–æ, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ —Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–µ –æ—á–∫–∏.");
        } else if (weatherCondition.contains("–æ–±–ª–∞—á") || weatherCondition.contains("–ø–∞—Å–º—É—Ä–Ω–æ")) {
            recommendation.append("‚õÖ –û–±–ª–∞—á–Ω–æ, –Ω–æ –¥–æ–∂–¥—å –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è.");
        } else {
            recommendation.append("üëç –•–æ—Ä–æ—à–∞—è –ø–æ–≥–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏!");
        }

        recommendationText.setText(recommendation.toString());
    }

    private void setupBackButton() {
        ImageButton backButton = findViewById(R.id.backButton);
        backButton.setOnClickListener(v -> {
            // –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            Intent intent = new Intent(MainActivity.this, MainMenuActivity.class);
            startActivity(intent);
            finish();
        });
    }

    private void requestLocationPermission() {
        List<String> permissions = new ArrayList<>();

        if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION)
                != PackageManager.PERMISSION_GRANTED) {
            permissions.add(Manifest.permission.ACCESS_FINE_LOCATION);
        }

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
            if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_BACKGROUND_LOCATION)
                    != PackageManager.PERMISSION_GRANTED) {
                permissions.add(Manifest.permission.ACCESS_BACKGROUND_LOCATION);
            }
        }

        if (!permissions.isEmpty()) {
            ActivityCompat.requestPermissions(this,
                    permissions.toArray(new String[0]),
                    LOCATION_PERMISSION_REQUEST_CODE);
        } else {
            getLocation();
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode,
                                           @NonNull String[] permissions,
                                           @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);

        if (requestCode == LOCATION_PERMISSION_REQUEST_CODE) {
            boolean allGranted = true;
            for (int result : grantResults) {
                if (result != PackageManager.PERMISSION_GRANTED) {
                    allGranted = false;
                    break;
                }
            }

            if (allGranted) {
                getLocation();
            } else {
                Toast.makeText(this, "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ", Toast.LENGTH_SHORT).show();
                fetchWeatherData("Moscow");
                savePreferences("Moscow", false);
            }
        }
    }

    @SuppressLint("MissingPermission")
    private void getLocation() {
        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION)
                != PackageManager.PERMISSION_GRANTED) {
            return;
        }

        fusedLocationClient.getLastLocation()
                .addOnSuccessListener(this, location -> {
                    if (location != null) {
                        double latitude = location.getLatitude();
                        double longitude = location.getLongitude();
                        fetchWeatherByCoordinates(latitude, longitude);
                    } else {
                        // –ï—Å–ª–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ú–æ—Å–∫–≤—É
                        Toast.makeText(this, "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", Toast.LENGTH_SHORT).show();
                        fetchWeatherData("Moscow");
                        savePreferences("Moscow", false);
                    }
                })
                .addOnFailureListener(e -> {
                    Log.e("Location", "Error getting location", e);
                    fetchWeatherData("Moscow");
                    savePreferences("Moscow", false);
                });
    }

    private void fetchWeatherByCoordinates(double latitude, double longitude) {
        String lat = String.valueOf(latitude);
        String lon = String.valueOf(longitude);

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
        WeatherAPI.getWeatherDataByCoordinates(lat, lon, new WeatherAPI.WeatherCallback() {
            @SuppressLint("DefaultLocale")
            @Override
            public void onSuccess(String response) {
                try {
                    WeatherData data = WeatherData.fromJson(response);
                    runOnUiThread(() -> {
                        updateUI(data);
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –∏–∑ API –∏ —Ä–µ–∂–∏–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
                        savePreferences(data.getCityName(), true);
                    });
                    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ —Ç–µ–º –∂–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
                    fetchForecastByCoordinates(lat, lon);
                } catch (JSONException e) {
                    Log.e("TAG", "JSON parsing error", e);
                }
            }

            @Override
            public void onFailure(Throwable t) {
                Log.e("TAG", "API call failed", t);
                runOnUiThread(() -> {
                    Toast.makeText(MainActivity.this, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", Toast.LENGTH_SHORT).show();
                    savePreferences("Moscow", false);
                });
            }
        });
    }

    private void fetchWeatherData(String city) {
        WeatherAPI.getWeatherDataByCity(city, new WeatherAPI.WeatherCallback() {
            @SuppressLint("DefaultLocale")
            @Override
            public void onSuccess(String response) {
                try {
                    WeatherData data = WeatherData.fromJson(response);
                    runOnUiThread(() -> {
                        updateUI(data);
                        savePreferences(city, false);
                    });
                    fetchForecastData(city);
                } catch (JSONException e) {
                    Log.e("TAG", "JSON parsing error", e);
                }
            }

            @Override
            public void onFailure(Throwable t) {
                Log.e("TAG", "API call failed", t);
                runOnUiThread(() -> {
                    Toast.makeText(MainActivity.this, "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", Toast.LENGTH_SHORT).show();
                    // –ü—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥
                    String savedCity = preferences.getString(PREFS_CITY, "Moscow");
                    fetchWeatherData(savedCity);
                });
            }
        });
    }

    private void fetchForecastData(String city) {
        WeatherAPI.getForecastByCity(city, new WeatherAPI.WeatherCallback() {
            @Override
            public void onSuccess(String response) {
                try {
                    List<HourlyForecast> forecasts = WeatherData.parseForecastData(response);
                    runOnUiThread(() -> updateHourlyForecast(forecasts));
                } catch (JSONException e) {
                    Log.e("TAG", "Forecast parsing error", e);
                }
            }

            @Override
            public void onFailure(Throwable t) {
                Log.e("TAG", "Forecast API call failed", t);
            }
        });
    }

    private void fetchForecastByCoordinates(String lat, String lon) {
        WeatherAPI.getForecastByCoordinates(lat, lon, new WeatherAPI.WeatherCallback() {
            @Override
            public void onSuccess(String response) {
                try {
                    List<HourlyForecast> forecasts = WeatherData.parseForecastData(response);
                    runOnUiThread(() -> updateHourlyForecast(forecasts));
                } catch (JSONException e) {
                    Log.e("TAG", "Forecast parsing error", e);
                }
            }

            @Override
            public void onFailure(Throwable t) {
                Log.e("TAG", "Forecast API call failed", t);
            }
        });
    }

    private void updateHourlyForecast(List<HourlyForecast> forecasts) {
        LinearLayout container = findViewById(R.id.weatherForecast);

        for (int i = 0; i < container.getChildCount(); i++) {
            View child = container.getChildAt(i);

            if (child instanceof MaterialCardView && i < forecasts.size()) {
                updateForecastCard((MaterialCardView) child, forecasts.get(i));
            }
        }
    }

    @SuppressLint({"DefaultLocale", "SetTextI18n"})
    private void updateUI(WeatherData data) {
        binding.temperature.setText(String.format("%.1f¬∞C", data.getTemperature()));
        binding.feelsLike.setText(String.format("–ü–æ –æ—â—É—â–µ–Ω–∏—è–º: %.1f¬∞C", data.getFeelsLike()));
        binding.humidity.setText(String.format("%d%%", data.getHumidity()));
        binding.windSpeed.setText(String.format("%.1f –º/—Å", data.getWindSpeed()));
        binding.pressureValue.setText(String.format("%.0f –≥–ü–∞", data.getPressure()));
        binding.weatherCondition.setText(capitalizeFirstLetter(data.getWeatherDescription()));
        binding.weatherIcon.setText(getWeatherEmoji(data.getIconCode()));
        binding.location.setText(data.getCityName());
        binding.currentDate.setText(formatDate(data.getTimestamp(), data.getTimezone()));
        updateRecommendation(data.getTemperature(), data.getWeatherDescription().toLowerCase());
    }

    private String capitalizeFirstLetter(String input) {
        if (input == null || input.isEmpty()) {
            return input;
        }
        return input.substring(0, 1).toUpperCase() + input.substring(1);
    }

    private String getWeatherEmoji(String iconCode) {
        switch (iconCode) {
            case "01d": return "‚òÄÔ∏è";
            case "01n": return "üåô";
            case "02d": return "‚õÖ";
            case "02n": return "‚òÅÔ∏è";
            case "03d": case "03n": return "‚òÅÔ∏è";
            case "04d": case "04n": return "‚òÅÔ∏èÔ∏è";
            case "09d": case "09n": return "üåßÔ∏è";
            case "10d": return "üå¶Ô∏è";
            case "10n": return "üåßÔ∏è";
            case "11d": case "11n": return "‚õàÔ∏è";
            case "13d": case "13n": return "‚ùÑÔ∏è";
            case "50d": case "50n": return "üå´Ô∏è";
            default: return "‚ùì";
        }
    }

    private String formatDate(long timestamp, int timezoneOffset) {
        try {
            SimpleDateFormat dateFormat = new SimpleDateFormat("d MMMM, EEEE", new Locale("ru"));
            TimeZone timeZone = TimeZone.getTimeZone("GMT");
            timeZone.setRawOffset(timezoneOffset * 1000);
            dateFormat.setTimeZone(timeZone);
            return dateFormat.format(new Date(timestamp));
        } catch (Exception e) {
            Log.e("DateFormat", "Error formatting date with timezone", e);
            return "";
        }
    }

    private void updateForecastCard(MaterialCardView card, HourlyForecast forecast) {
        LinearLayout layout = (LinearLayout) card.getChildAt(0);

        TextView timeView = (TextView) layout.getChildAt(0);
        timeView.setText(forecast.isNow() ? "–°–µ–π—á–∞—Å" : forecast.getTime());

        ImageView iconView = (ImageView) layout.getChildAt(1);
        iconView.setImageResource(forecast.getIconRes());

        TextView tempView = (TextView) layout.getChildAt(2);
        tempView.setText(String.format(Locale.getDefault(), "%.0f¬∞", forecast.getTemperature()));
    }
}